pipeline {

    agent any

    environment {
        DOCKER_HOST = 'tcp://localhost:2375'
        TELEGRAM_TOKEN = credentials('telegram-token')
        ENV = "${env.GIT_BRANCH == 'origin/main' ? 'prod' : 'dev'}"
        IMAGE_NAME = "efree-admin-dashboard"
        VERSION = "1.0.${env.BUILD_NUMBER}"
        FULL_IMAGE_NAME="${BASE_REGISTRY_USER}/${IMAGE_NAME}:${VERSION}"
    }

    stages {
        stage('Build Admin Dashboard') {
            steps {
                sh 'echo "Building Admin Dashboard..."'
                sh 'ls -lart'
                script {
                    docker.withRegistry("", "${BASE_REGISTRY}") {
                        def adminDashboardImage = docker.build("${FULL_IMAGE_NAME}", "-f Dockerfile .")
                        adminDashboardImage.push()
                    }
                }
            }
        }

        stage('Update Deployment Manifest') {
            steps {
                sh """
                    yq eval '.spec.template.spec.containers[0].image = \"${FULL_IMAGE_NAME}\"' -i pipeline/admin-dashboard.yaml
                """
            }
        }

        stage('Apply Kubernetes Manifest') {
            steps {
                sh """
                    kubectl apply -f pipeline/admin-dashboard.yaml
                """
            }
        }

        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
    }

    post {
        always {
            script {
                try {
                    def COMMITER = sh (
                        script: 'git --no-pager show -s --format=\'%ae\'',
                        returnStdout: true
                    ).trim()
                    def EMOTE = currentBuild.result == 'SUCCESS' ? '✅' : '❌'
                    def DESC = currentBuild.result == 'SUCCESS' ? 'Admin dashboard deployed successfully!' : 'Admin dashboard deployed fail!'
                    def STATUS = "${currentBuild.result}${EMOTE}"
                    def MESSAGE = """
                    <b>Status : </b>${STATUS}
                    <b>Branch : </b>${env.GIT_BRANCH}
                    <b>Commiter : </b>${COMMITER}
                    <b>Commit ID : </b>${env.GIT_COMMIT}
                    <b>Environment : </b>${ENV}
                    <b>Version : </b>${IMAGE_NAME}:${VERSION}
                    <b>Build Url : </b> <a href=\"${BUILD_URL}\">view detail</a>
                    <b>Description : </b>${DESC}
                    """.stripIndent()

                    sh "curl -X POST https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage -d chat_id=${TELEGRAM_CHAT_ID} -d text='${MESSAGE}' -d parse_mode=HTML --max-time 30"
                } catch (Exception err) {
                    echo "${err}"
                }
            }
        }
    }
    
}